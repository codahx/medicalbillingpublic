{"ast":null,"code":"import { h, withDirectives } from 'vue';\nexport function hSlot(slot, otherwise) {\n  return slot !== void 0 ? slot() || otherwise : otherwise;\n}\nexport function hUniqueSlot(slot, otherwise) {\n  if (slot !== void 0) {\n    const vnode = slot();\n    if (vnode !== void 0 && vnode !== null) {\n      return vnode.slice();\n    }\n  }\n  return otherwise;\n}\n\n/**\r\n * Source definitely exists,\r\n * so it's merged with the possible slot\r\n */\nexport function hMergeSlot(slot, source) {\n  return slot !== void 0 ? source.concat(slot()) : source;\n}\n\n/**\r\n * Merge with possible slot,\r\n * even if source might not exist\r\n */\nexport function hMergeSlotSafely(slot, source) {\n  if (slot === void 0) {\n    return source;\n  }\n  return source !== void 0 ? source.concat(slot()) : slot();\n}\n\n/*\r\n * (String)  key       - unique vnode key\r\n * (Boolean) condition - should change ONLY when adding/removing directive\r\n */\nexport function hDir(tag, data, children, key, condition, getDirsFn) {\n  data.key = key + condition;\n  const vnode = h(tag, data, children);\n  return condition === true ? withDirectives(vnode, getDirsFn()) : vnode;\n}","map":{"version":3,"names":["h","withDirectives","hSlot","slot","otherwise","hUniqueSlot","vnode","slice","hMergeSlot","source","concat","hMergeSlotSafely","hDir","tag","data","children","key","condition","getDirsFn"],"sources":["C:/Users/raamb/Desktop/MedicalBilling/front-end/node_modules/quasar/src/utils/private/render.js"],"sourcesContent":["import { h, withDirectives } from 'vue'\r\n\r\nexport function hSlot (slot, otherwise) {\r\n  return slot !== void 0\r\n    ? slot() || otherwise\r\n    : otherwise\r\n}\r\n\r\nexport function hUniqueSlot (slot, otherwise) {\r\n  if (slot !== void 0) {\r\n    const vnode = slot()\r\n    if (vnode !== void 0 && vnode !== null) {\r\n      return vnode.slice()\r\n    }\r\n  }\r\n\r\n  return otherwise\r\n}\r\n\r\n/**\r\n * Source definitely exists,\r\n * so it's merged with the possible slot\r\n */\r\nexport function hMergeSlot (slot, source) {\r\n  return slot !== void 0\r\n    ? source.concat(slot())\r\n    : source\r\n}\r\n\r\n/**\r\n * Merge with possible slot,\r\n * even if source might not exist\r\n */\r\nexport function hMergeSlotSafely (slot, source) {\r\n  if (slot === void 0) {\r\n    return source\r\n  }\r\n\r\n  return source !== void 0\r\n    ? source.concat(slot())\r\n    : slot()\r\n}\r\n\r\n/*\r\n * (String)  key       - unique vnode key\r\n * (Boolean) condition - should change ONLY when adding/removing directive\r\n */\r\nexport function hDir (\r\n  tag,\r\n  data,\r\n  children,\r\n  key,\r\n  condition,\r\n  getDirsFn\r\n) {\r\n  data.key = key + condition\r\n\r\n  const vnode = h(tag, data, children)\r\n\r\n  return condition === true\r\n    ? withDirectives(vnode, getDirsFn())\r\n    : vnode\r\n}\r\n"],"mappings":"AAAA,SAASA,CAAC,EAAEC,cAAc,QAAQ,KAAK;AAEvC,OAAO,SAASC,KAAK,CAAEC,IAAI,EAAEC,SAAS,EAAE;EACtC,OAAOD,IAAI,KAAK,KAAK,CAAC,GAClBA,IAAI,EAAE,IAAIC,SAAS,GACnBA,SAAS;AACf;AAEA,OAAO,SAASC,WAAW,CAAEF,IAAI,EAAEC,SAAS,EAAE;EAC5C,IAAID,IAAI,KAAK,KAAK,CAAC,EAAE;IACnB,MAAMG,KAAK,GAAGH,IAAI,EAAE;IACpB,IAAIG,KAAK,KAAK,KAAK,CAAC,IAAIA,KAAK,KAAK,IAAI,EAAE;MACtC,OAAOA,KAAK,CAACC,KAAK,EAAE;IACtB;EACF;EAEA,OAAOH,SAAS;AAClB;;AAEA;AACA;AACA;AACA;AACA,OAAO,SAASI,UAAU,CAAEL,IAAI,EAAEM,MAAM,EAAE;EACxC,OAAON,IAAI,KAAK,KAAK,CAAC,GAClBM,MAAM,CAACC,MAAM,CAACP,IAAI,EAAE,CAAC,GACrBM,MAAM;AACZ;;AAEA;AACA;AACA;AACA;AACA,OAAO,SAASE,gBAAgB,CAAER,IAAI,EAAEM,MAAM,EAAE;EAC9C,IAAIN,IAAI,KAAK,KAAK,CAAC,EAAE;IACnB,OAAOM,MAAM;EACf;EAEA,OAAOA,MAAM,KAAK,KAAK,CAAC,GACpBA,MAAM,CAACC,MAAM,CAACP,IAAI,EAAE,CAAC,GACrBA,IAAI,EAAE;AACZ;;AAEA;AACA;AACA;AACA;AACA,OAAO,SAASS,IAAI,CAClBC,GAAG,EACHC,IAAI,EACJC,QAAQ,EACRC,GAAG,EACHC,SAAS,EACTC,SAAS,EACT;EACAJ,IAAI,CAACE,GAAG,GAAGA,GAAG,GAAGC,SAAS;EAE1B,MAAMX,KAAK,GAAGN,CAAC,CAACa,GAAG,EAAEC,IAAI,EAAEC,QAAQ,CAAC;EAEpC,OAAOE,SAAS,KAAK,IAAI,GACrBhB,cAAc,CAACK,KAAK,EAAEY,SAAS,EAAE,CAAC,GAClCZ,KAAK;AACX"},"metadata":{},"sourceType":"module","externalDependencies":[]}