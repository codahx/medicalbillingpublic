{"ast":null,"code":"export default {\n  name: 'Home',\n  methods: {\n    uploadImage(file) {\n      return {\n        url: 'http://localhost:5000/api/upload',\n        method: 'POST'\n      };\n    },\n    onUploaded(info) {\n      let files = info.files;\n      files.forEach(item => {\n        this.$q.notify({\n          type: 'positive',\n          message: `${item.name} successfully uploaded`\n        });\n      });\n    },\n    onFailed(info) {\n      let err = JSON.parse(info.xhr.response);\n      console.log(err);\n      let files = info.files;\n      files.forEach(item => {\n        this.$q.notify({\n          type: 'negative',\n          message: `${item.name} - ${err.error} Error ${err.message}`\n        });\n      });\n    },\n    onRejected(rejectedEntries) {\n      this.$q.notify({\n        type: 'negative',\n        message: `${rejectedEntries.length} file(s) did not pass validation constraints`\n      });\n    }\n  }\n};","map":{"version":3,"mappings":"AAcC,eAAe;EACdA,IAAI,EAAE,MAAM;EACZC,OAAO,EAAE;IACRC,WAAW,CAACC,IAAI,EAAE;MACjB,OAAO;QACNC,GAAG,EAAE,kCAAkC;QACvCC,MAAM,EAAE;MACT,CAAC;IACF,CAAC;IACDC,UAAU,CAACC,IAAI,EAAE;MAChB,IAAIC,KAAI,GAAID,IAAI,CAACC,KAAK;MACtBA,KAAK,CAACC,OAAO,CAAEC,IAAI,IAAK;QACvB,IAAI,CAACC,EAAE,CAACC,MAAM,CAAC;UACdC,IAAI,EAAE,UAAU;UAChBC,OAAO,EAAG,GAAEJ,IAAI,CAACV,IAAI;QACtB,CAAC,CAAC;MACH,CAAC,CAAC;IACH,CAAC;IACDe,QAAQ,CAACR,IAAI,EAAE;MACd,IAAIS,GAAE,GAAIC,IAAI,CAACC,KAAK,CAACX,IAAI,CAACY,GAAG,CAACC,QAAQ,CAAC;MACvCC,OAAO,CAACC,GAAG,CAACN,GAAG,CAAC;MAChB,IAAIR,KAAI,GAAID,IAAI,CAACC,KAAK;MACtBA,KAAK,CAACC,OAAO,CAAEC,IAAI,IAAK;QACvB,IAAI,CAACC,EAAE,CAACC,MAAM,CAAC;UACdC,IAAI,EAAE,UAAU;UAChBC,OAAO,EAAG,GAAEJ,IAAI,CAACV,IAAI,MAAMgB,GAAG,CAACO,KAAK,UAAUP,GAAG,CAACF,OAAQ;QAC3D,CAAC,CAAC;MACH,CAAC,CAAC;IACH,CAAC;IACDU,UAAU,CAACC,eAAe,EAAE;MAC3B,IAAI,CAACd,EAAE,CAACC,MAAM,CAAC;QACdC,IAAI,EAAE,UAAU;QAChBC,OAAO,EAAG,GAAEW,eAAe,CAACC,MAAM;MACnC,CAAC,CAAC;IACH;EACD;AACD,CAAC","names":["name","methods","uploadImage","file","url","method","onUploaded","info","files","forEach","item","$q","notify","type","message","onFailed","err","JSON","parse","xhr","response","console","log","error","onRejected","rejectedEntries","length"],"sourceRoot":"","sources":["C:\\Users\\raamb\\Desktop\\MedicalBilling\\front-end\\src\\components\\Uploader.vue"],"sourcesContent":["<template>\r\n\t<q-uploader\r\n\t\tstyle=\"max-width: 300px\"\r\n\t\t:factory=\"uploadImage\"\r\n\t\taccept=\"image/jpeg, image/png\"\r\n\t\tlabel=\"Max number of files (2)\"\r\n\t\tmultiple\r\n\t\tmax-files=\"1\"\r\n\t\t@uploaded=\"onUploaded\"\r\n\t\t@failed=\"onFailed\"\r\n\t\t@rejected=\"onRejected\" />\r\n</template>\r\n\r\n<script>\r\n\texport default {\r\n\t\tname: 'Home',\r\n\t\tmethods: {\r\n\t\t\tuploadImage(file) {\r\n\t\t\t\treturn {\r\n\t\t\t\t\turl: 'http://localhost:5000/api/upload',\r\n\t\t\t\t\tmethod: 'POST',\r\n\t\t\t\t};\r\n\t\t\t},\r\n\t\t\tonUploaded(info) {\r\n\t\t\t\tlet files = info.files;\r\n\t\t\t\tfiles.forEach((item) => {\r\n\t\t\t\t\tthis.$q.notify({\r\n\t\t\t\t\t\ttype: 'positive',\r\n\t\t\t\t\t\tmessage: `${item.name} successfully uploaded`,\r\n\t\t\t\t\t});\r\n\t\t\t\t});\r\n\t\t\t},\r\n\t\t\tonFailed(info) {\r\n\t\t\t\tlet err = JSON.parse(info.xhr.response);\r\n\t\t\t\tconsole.log(err);\r\n\t\t\t\tlet files = info.files;\r\n\t\t\t\tfiles.forEach((item) => {\r\n\t\t\t\t\tthis.$q.notify({\r\n\t\t\t\t\t\ttype: 'negative',\r\n\t\t\t\t\t\tmessage: `${item.name} - ${err.error} Error ${err.message}`,\r\n\t\t\t\t\t});\r\n\t\t\t\t});\r\n\t\t\t},\r\n\t\t\tonRejected(rejectedEntries) {\r\n\t\t\t\tthis.$q.notify({\r\n\t\t\t\t\ttype: 'negative',\r\n\t\t\t\t\tmessage: `${rejectedEntries.length} file(s) did not pass validation constraints`,\r\n\t\t\t\t});\r\n\t\t\t},\r\n\t\t},\r\n\t};\r\n</script>\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}