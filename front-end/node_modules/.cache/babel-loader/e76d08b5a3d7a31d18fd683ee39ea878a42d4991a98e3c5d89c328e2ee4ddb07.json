{"ast":null,"code":"import { defineComponent, ref, watchEffect, onMounted, onUnmounted, watch } from 'vue';\nimport Cropper from 'cropperjs';\nexport default defineComponent({\n  name: 'ImageCropper',\n  emits: ['imageCropped'],\n  setup(_props, {\n    emit\n  }) {\n    const imageInput = ref(null); // template ref for file input\n    const selectedFile = ref(null);\n    const imageSrc = ref(null);\n    const img = ref(null);\n    const fileReader = new FileReader();\n    let cropper = null;\n    fileReader.onload = event => {\n      imageSrc.value = event.target.result;\n    };\n    const handleImageCropped = () => {\n      cropper.getCroppedCanvas({\n        width: 256,\n        height: 256\n      }).toBlob(blob => {\n        console.log(blob);\n        emit('imageCropped', blob);\n      }, 'image/jpeg');\n      selectedFile.value = null;\n    };\n    const fileChanged = e => {\n      const files = e.target.files || e.dataTransfer.files;\n      if (files.length) {\n        selectedFile.value = files[0];\n      }\n    };\n    const fileCleared = _ => {\n      selectedFile.value = null;\n    };\n    onMounted(() => {\n      cropper = new Cropper(img.value, {\n        aspectRatio: 1,\n        minCropBoxWidth: 256,\n        minCropBoxHeight: 256,\n        viewMode: 3,\n        dragMode: 'move',\n        background: false,\n        cropBoxMovable: false,\n        cropBoxResizable: false\n      });\n    });\n    onUnmounted(() => {\n      cropper.destroy();\n    });\n    watchEffect(() => {\n      if (selectedFile.value) {\n        fileReader.readAsDataURL(selectedFile.value);\n      } else {\n        imageSrc.value = null;\n      }\n    });\n    watch(imageSrc, () => {\n      if (imageSrc.value) {\n        cropper.replace(imageSrc.value);\n      }\n    }, {\n      flush: 'post' // watch runs after component updates\n    });\n\n    return {\n      imageInput,\n      selectedFile,\n      fileChanged,\n      fileCleared,\n      imageSrc,\n      img,\n      handleImageCropped\n    };\n  }\n});","map":{"version":3,"mappings":"AAmCC,SACCA,eAAe,EACfC,GAAG,EACHC,WAAW,EACXC,SAAS,EACTC,WAAW,EACXC,KAAK,QACC,KAAK;AACZ,OAAOC,OAAM,MAAO,WAAW;AAC/B,eAAeN,eAAe,CAAC;EAC9BO,IAAI,EAAE,cAAc;EACpBC,KAAK,EAAE,CAAC,cAAc,CAAC;EACvBC,KAAK,CAACC,MAAM,EAAE;IAAEC;EAAK,CAAC,EAAE;IACvB,MAAMC,UAAS,GAAIX,GAAG,CAAC,IAAI,CAAC,EAAE;IAC9B,MAAMY,YAAW,GAAIZ,GAAG,CAAC,IAAI,CAAC;IAC9B,MAAMa,QAAO,GAAIb,GAAG,CAAC,IAAI,CAAC;IAC1B,MAAMc,GAAE,GAAId,GAAG,CAAC,IAAI,CAAC;IACrB,MAAMe,UAAS,GAAI,IAAIC,UAAU,EAAE;IACnC,IAAIC,OAAM,GAAI,IAAI;IAClBF,UAAU,CAACG,MAAK,GAAKC,KAAK,IAAK;MAC9BN,QAAQ,CAACO,KAAI,GAAID,KAAK,CAACE,MAAM,CAACC,MAAM;IACrC,CAAC;IACD,MAAMC,kBAAiB,GAAI,MAAM;MAChCN,OAAM,CACJO,gBAAgB,CAAC;QACjBC,KAAK,EAAE,GAAG;QACVC,MAAM,EAAE;MACT,CAAC,EACAC,MAAM,CAAEC,IAAI,IAAK;QACjBC,OAAO,CAACC,GAAG,CAACF,IAAI,CAAC;QACjBlB,IAAI,CAAC,cAAc,EAAEkB,IAAI,CAAC;MAC3B,CAAC,EAAE,YAAY,CAAC;MACjBhB,YAAY,CAACQ,KAAI,GAAI,IAAI;IAC1B,CAAC;IACD,MAAMW,WAAU,GAAKC,CAAC,IAAK;MAC1B,MAAMC,KAAI,GAAID,CAAC,CAACX,MAAM,CAACY,KAAI,IAAKD,CAAC,CAACE,YAAY,CAACD,KAAK;MACpD,IAAIA,KAAK,CAACE,MAAM,EAAE;QACjBvB,YAAY,CAACQ,KAAI,GAAIa,KAAK,CAAC,CAAC,CAAC;MAC9B;IACD,CAAC;IACD,MAAMG,WAAU,GAAKC,CAAC,IAAK;MAC1BzB,YAAY,CAACQ,KAAI,GAAI,IAAI;IAC1B,CAAC;IACDlB,SAAS,CAAC,MAAM;MACfe,OAAM,GAAI,IAAIZ,OAAO,CAACS,GAAG,CAACM,KAAK,EAAE;QAChCkB,WAAW,EAAE,CAAC;QACdC,eAAe,EAAE,GAAG;QACpBC,gBAAgB,EAAE,GAAG;QACrBC,QAAQ,EAAE,CAAC;QACXC,QAAQ,EAAE,MAAM;QAChBC,UAAU,EAAE,KAAK;QACjBC,cAAc,EAAE,KAAK;QACrBC,gBAAgB,EAAE;MACnB,CAAC,CAAC;IACH,CAAC,CAAC;IACF1C,WAAW,CAAC,MAAM;MACjBc,OAAO,CAAC6B,OAAO,EAAE;IAClB,CAAC,CAAC;IACF7C,WAAW,CAAC,MAAM;MACjB,IAAIW,YAAY,CAACQ,KAAK,EAAE;QACvBL,UAAU,CAACgC,aAAa,CAACnC,YAAY,CAACQ,KAAK,CAAC;MAC7C,OAAO;QACNP,QAAQ,CAACO,KAAI,GAAI,IAAI;MACtB;IACD,CAAC,CAAC;IACFhB,KAAK,CACJS,QAAQ,EACR,MAAM;MACL,IAAIA,QAAQ,CAACO,KAAK,EAAE;QACnBH,OAAO,CAAC+B,OAAO,CAACnC,QAAQ,CAACO,KAAK,CAAC;MAChC;IACD,CAAC,EACD;MACC6B,KAAK,EAAE,MAAM,CAAE;IAChB,EACA;;IACD,OAAO;MACNtC,UAAU;MACVC,YAAY;MACZmB,WAAW;MACXK,WAAW;MACXvB,QAAQ;MACRC,GAAG;MACHS;IACD,CAAC;EACF;AACD,CAAC,CAAC","names":["defineComponent","ref","watchEffect","onMounted","onUnmounted","watch","Cropper","name","emits","setup","_props","emit","imageInput","selectedFile","imageSrc","img","fileReader","FileReader","cropper","onload","event","value","target","result","handleImageCropped","getCroppedCanvas","width","height","toBlob","blob","console","log","fileChanged","e","files","dataTransfer","length","fileCleared","_","aspectRatio","minCropBoxWidth","minCropBoxHeight","viewMode","dragMode","background","cropBoxMovable","cropBoxResizable","destroy","readAsDataURL","replace","flush"],"sourceRoot":"","sources":["C:\\Users\\raamb\\Desktop\\Medical Billing\\front-end\\src\\components\\ui\\ImageCropper.vue"],"sourcesContent":["<template>\r\n\t<div v-show=\"imageSrc\" class=\"my-2 w-64 h-64 object-fill mx-auto\">\r\n\t\t<img class=\"block max-w-full\" ref=\"img\" :src=\"imageSrc\" />\r\n\t</div>\r\n\t<div class=\"flex justify-center content-end mt-2\">\r\n\t\t<button\r\n\t\t\tv-if=\"!imageSrc\"\r\n\t\t\tclass=\"btn btn-blue w-32 mx-2\"\r\n\t\t\t@click=\"imageInput.click()\">\r\n\t\t\tNew Image\r\n\t\t</button>\r\n\t\t<button v-else class=\"btn btn-blue w-32 mx-2\" @click=\"handleImageCropped\">\r\n\t\t\tUpdate\r\n\t\t</button>\r\n\t\t<button\r\n\t\t\tbutton\r\n\t\t\tv-if=\"imageSrc\"\r\n\t\t\tclass=\"btn btn-gray w-32 mx-2\"\r\n\t\t\t@click=\"fileCleared\">\r\n\t\t\tCancel\r\n\t\t</button>\r\n\t\t<input\r\n\t\t\ttype=\"file\"\r\n\t\t\tref=\"imageInput\"\r\n\t\t\taccept=\".jpg,.jpeg,.png\"\r\n\t\t\t@change=\"fileChanged\"\r\n\t\t\t:style=\"{ display: 'none' }\" />\r\n\t</div>\r\n\t<div v-if=\"selectedFile\" class=\"my-2 align-baseline text-center\">\r\n\t\t<span>Selected File: </span>\r\n\t\t<span>{{ selectedFile.name }}</span>\r\n\t</div>\r\n</template>\r\n\r\n<script>\r\n\timport {\r\n\t\tdefineComponent,\r\n\t\tref,\r\n\t\twatchEffect,\r\n\t\tonMounted,\r\n\t\tonUnmounted,\r\n\t\twatch,\r\n\t} from 'vue';\r\n\timport Cropper from 'cropperjs';\r\n\texport default defineComponent({\r\n\t\tname: 'ImageCropper',\r\n\t\temits: ['imageCropped'],\r\n\t\tsetup(_props, { emit }) {\r\n\t\t\tconst imageInput = ref(null); // template ref for file input\r\n\t\t\tconst selectedFile = ref(null);\r\n\t\t\tconst imageSrc = ref(null);\r\n\t\t\tconst img = ref(null);\r\n\t\t\tconst fileReader = new FileReader();\r\n\t\t\tlet cropper = null;\r\n\t\t\tfileReader.onload = (event) => {\r\n\t\t\t\timageSrc.value = event.target.result;\r\n\t\t\t};\r\n\t\t\tconst handleImageCropped = () => {\r\n\t\t\t\tcropper\r\n\t\t\t\t\t.getCroppedCanvas({\r\n\t\t\t\t\t\twidth: 256,\r\n\t\t\t\t\t\theight: 256,\r\n\t\t\t\t\t})\r\n\t\t\t\t\t.toBlob((blob) => {\r\n\t\t\t\t\t\tconsole.log(blob);\r\n\t\t\t\t\t\temit('imageCropped', blob);\r\n\t\t\t\t\t}, 'image/jpeg');\r\n\t\t\t\tselectedFile.value = null;\r\n\t\t\t};\r\n\t\t\tconst fileChanged = (e) => {\r\n\t\t\t\tconst files = e.target.files || e.dataTransfer.files;\r\n\t\t\t\tif (files.length) {\r\n\t\t\t\t\tselectedFile.value = files[0];\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\t\tconst fileCleared = (_) => {\r\n\t\t\t\tselectedFile.value = null;\r\n\t\t\t};\r\n\t\t\tonMounted(() => {\r\n\t\t\t\tcropper = new Cropper(img.value, {\r\n\t\t\t\t\taspectRatio: 1,\r\n\t\t\t\t\tminCropBoxWidth: 256,\r\n\t\t\t\t\tminCropBoxHeight: 256,\r\n\t\t\t\t\tviewMode: 3,\r\n\t\t\t\t\tdragMode: 'move',\r\n\t\t\t\t\tbackground: false,\r\n\t\t\t\t\tcropBoxMovable: false,\r\n\t\t\t\t\tcropBoxResizable: false,\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t\tonUnmounted(() => {\r\n\t\t\t\tcropper.destroy();\r\n\t\t\t});\r\n\t\t\twatchEffect(() => {\r\n\t\t\t\tif (selectedFile.value) {\r\n\t\t\t\t\tfileReader.readAsDataURL(selectedFile.value);\r\n\t\t\t\t} else {\r\n\t\t\t\t\timageSrc.value = null;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\twatch(\r\n\t\t\t\timageSrc,\r\n\t\t\t\t() => {\r\n\t\t\t\t\tif (imageSrc.value) {\r\n\t\t\t\t\t\tcropper.replace(imageSrc.value);\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tflush: 'post', // watch runs after component updates\r\n\t\t\t\t}\r\n\t\t\t);\r\n\t\t\treturn {\r\n\t\t\t\timageInput,\r\n\t\t\t\tselectedFile,\r\n\t\t\t\tfileChanged,\r\n\t\t\t\tfileCleared,\r\n\t\t\t\timageSrc,\r\n\t\t\t\timg,\r\n\t\t\t\thandleImageCropped,\r\n\t\t\t};\r\n\t\t},\r\n\t});\r\n</script>\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}