{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { h, computed, getCurrentInstance } from 'vue';\nimport useSize from '../../composables/private/use-size.js';\nimport { useCircularCommonProps } from './use-circular-progress.js';\nimport { createComponent } from '../../utils/private/create.js';\nimport { hMergeSlotSafely } from '../../utils/private/render.js';\nimport { between } from '../../utils/format.js';\nconst radius = 50,\n  diameter = 2 * radius,\n  circumference = diameter * Math.PI,\n  strokeDashArray = Math.round(circumference * 1000) / 1000;\nexport default createComponent({\n  name: 'QCircularProgress',\n  props: {\n    ...useCircularCommonProps,\n    value: {\n      type: Number,\n      default: 0\n    },\n    animationSpeed: {\n      type: [String, Number],\n      default: 600\n    },\n    indeterminate: Boolean\n  },\n  setup(props, {\n    slots\n  }) {\n    const {\n      proxy: {\n        $q\n      }\n    } = getCurrentInstance();\n    const sizeStyle = useSize(props);\n    const svgStyle = computed(() => {\n      const angle = ($q.lang.rtl === true ? -1 : 1) * props.angle;\n      return {\n        transform: props.reverse !== ($q.lang.rtl === true) ? `scale3d(-1, 1, 1) rotate3d(0, 0, 1, ${-90 - angle}deg)` : `rotate3d(0, 0, 1, ${angle - 90}deg)`\n      };\n    });\n    const circleStyle = computed(() => props.instantFeedback !== true && props.indeterminate !== true ? {\n      transition: `stroke-dashoffset ${props.animationSpeed}ms ease 0s, stroke ${props.animationSpeed}ms ease`\n    } : '');\n    const viewBox = computed(() => diameter / (1 - props.thickness / 2));\n    const viewBoxAttr = computed(() => `${viewBox.value / 2} ${viewBox.value / 2} ${viewBox.value} ${viewBox.value}`);\n    const normalized = computed(() => between(props.value, props.min, props.max));\n    const strokeDashOffset = computed(() => circumference * (1 - (normalized.value - props.min) / (props.max - props.min)));\n    const strokeWidth = computed(() => props.thickness / 2 * viewBox.value);\n    function getCircle({\n      thickness,\n      offset,\n      color,\n      cls,\n      rounded\n    }) {\n      return h('circle', {\n        class: 'q-circular-progress__' + cls + (color !== void 0 ? ` text-${color}` : ''),\n        style: circleStyle.value,\n        fill: 'transparent',\n        stroke: 'currentColor',\n        'stroke-width': thickness,\n        'stroke-dasharray': strokeDashArray,\n        'stroke-dashoffset': offset,\n        'stroke-linecap': rounded,\n        cx: viewBox.value,\n        cy: viewBox.value,\n        r: radius\n      });\n    }\n    return () => {\n      const svgChild = [];\n      props.centerColor !== void 0 && props.centerColor !== 'transparent' && svgChild.push(h('circle', {\n        class: `q-circular-progress__center text-${props.centerColor}`,\n        fill: 'currentColor',\n        r: radius - strokeWidth.value / 2,\n        cx: viewBox.value,\n        cy: viewBox.value\n      }));\n      props.trackColor !== void 0 && props.trackColor !== 'transparent' && svgChild.push(getCircle({\n        cls: 'track',\n        thickness: strokeWidth.value,\n        offset: 0,\n        color: props.trackColor\n      }));\n      svgChild.push(getCircle({\n        cls: 'circle',\n        thickness: strokeWidth.value,\n        offset: strokeDashOffset.value,\n        color: props.color,\n        rounded: props.rounded === true ? 'round' : void 0\n      }));\n      const child = [h('svg', {\n        class: 'q-circular-progress__svg',\n        style: svgStyle.value,\n        viewBox: viewBoxAttr.value,\n        'aria-hidden': 'true'\n      }, svgChild)];\n      props.showValue === true && child.push(h('div', {\n        class: 'q-circular-progress__text absolute-full row flex-center content-center',\n        style: {\n          fontSize: props.fontSize\n        }\n      }, slots.default !== void 0 ? slots.default() : [h('div', normalized.value)]));\n      return h('div', {\n        class: `q-circular-progress q-circular-progress--${props.indeterminate === true ? 'in' : ''}determinate`,\n        style: sizeStyle.value,\n        role: 'progressbar',\n        'aria-valuemin': props.min,\n        'aria-valuemax': props.max,\n        'aria-valuenow': props.indeterminate === true ? void 0 : normalized.value\n      }, hMergeSlotSafely(slots.internal, child)); // \"internal\" is used by QKnob\n    };\n  }\n});","map":{"version":3,"names":["h","computed","getCurrentInstance","useSize","useCircularCommonProps","createComponent","hMergeSlotSafely","between","radius","diameter","circumference","Math","PI","strokeDashArray","round","name","props","value","type","Number","default","animationSpeed","String","indeterminate","Boolean","setup","slots","proxy","$q","sizeStyle","svgStyle","angle","lang","rtl","transform","reverse","circleStyle","instantFeedback","transition","viewBox","thickness","viewBoxAttr","normalized","min","max","strokeDashOffset","strokeWidth","getCircle","offset","color","cls","rounded","class","style","fill","stroke","cx","cy","r","svgChild","centerColor","push","trackColor","child","showValue","fontSize","role","internal"],"sources":["C:/Users/raamb/Desktop/MedicalBilling/front-end/node_modules/quasar/src/components/circular-progress/QCircularProgress.js"],"sourcesContent":["import { h, computed, getCurrentInstance } from 'vue'\n\nimport useSize from '../../composables/private/use-size.js'\nimport { useCircularCommonProps } from './use-circular-progress.js'\n\nimport { createComponent } from '../../utils/private/create.js'\nimport { hMergeSlotSafely } from '../../utils/private/render.js'\nimport { between } from '../../utils/format.js'\n\nconst\n  radius = 50,\n  diameter = 2 * radius,\n  circumference = diameter * Math.PI,\n  strokeDashArray = Math.round(circumference * 1000) / 1000\n\nexport default createComponent({\n  name: 'QCircularProgress',\n\n  props: {\n    ...useCircularCommonProps,\n\n    value: {\n      type: Number,\n      default: 0\n    },\n\n    animationSpeed: {\n      type: [ String, Number ],\n      default: 600\n    },\n\n    indeterminate: Boolean\n  },\n\n  setup (props, { slots }) {\n    const { proxy: { $q } } = getCurrentInstance()\n    const sizeStyle = useSize(props)\n\n    const svgStyle = computed(() => {\n      const angle = ($q.lang.rtl === true ? -1 : 1) * props.angle\n\n      return {\n        transform: props.reverse !== ($q.lang.rtl === true)\n          ? `scale3d(-1, 1, 1) rotate3d(0, 0, 1, ${ -90 - angle }deg)`\n          : `rotate3d(0, 0, 1, ${ angle - 90 }deg)`\n      }\n    })\n\n    const circleStyle = computed(() => (\n      props.instantFeedback !== true && props.indeterminate !== true\n        ? { transition: `stroke-dashoffset ${ props.animationSpeed }ms ease 0s, stroke ${ props.animationSpeed }ms ease` }\n        : ''\n    ))\n\n    const viewBox = computed(() => diameter / (1 - props.thickness / 2))\n\n    const viewBoxAttr = computed(() =>\n      `${ viewBox.value / 2 } ${ viewBox.value / 2 } ${ viewBox.value } ${ viewBox.value }`\n    )\n\n    const normalized = computed(() => between(props.value, props.min, props.max))\n\n    const strokeDashOffset = computed(() => circumference * (\n      1 - (normalized.value - props.min) / (props.max - props.min)\n    ))\n\n    const strokeWidth = computed(() => props.thickness / 2 * viewBox.value)\n\n    function getCircle ({ thickness, offset, color, cls, rounded }) {\n      return h('circle', {\n        class: 'q-circular-progress__' + cls + (color !== void 0 ? ` text-${ color }` : ''),\n        style: circleStyle.value,\n        fill: 'transparent',\n        stroke: 'currentColor',\n        'stroke-width': thickness,\n        'stroke-dasharray': strokeDashArray,\n        'stroke-dashoffset': offset,\n        'stroke-linecap': rounded,\n        cx: viewBox.value,\n        cy: viewBox.value,\n        r: radius\n      })\n    }\n\n    return () => {\n      const svgChild = []\n\n      props.centerColor !== void 0 && props.centerColor !== 'transparent' && svgChild.push(\n        h('circle', {\n          class: `q-circular-progress__center text-${ props.centerColor }`,\n          fill: 'currentColor',\n          r: radius - strokeWidth.value / 2,\n          cx: viewBox.value,\n          cy: viewBox.value\n        })\n      )\n\n      props.trackColor !== void 0 && props.trackColor !== 'transparent' && svgChild.push(\n        getCircle({\n          cls: 'track',\n          thickness: strokeWidth.value,\n          offset: 0,\n          color: props.trackColor\n        })\n      )\n\n      svgChild.push(\n        getCircle({\n          cls: 'circle',\n          thickness: strokeWidth.value,\n          offset: strokeDashOffset.value,\n          color: props.color,\n          rounded: props.rounded === true ? 'round' : void 0\n        })\n      )\n\n      const child = [\n        h('svg', {\n          class: 'q-circular-progress__svg',\n          style: svgStyle.value,\n          viewBox: viewBoxAttr.value,\n          'aria-hidden': 'true'\n        }, svgChild)\n      ]\n\n      props.showValue === true && child.push(\n        h('div', {\n          class: 'q-circular-progress__text absolute-full row flex-center content-center',\n          style: { fontSize: props.fontSize }\n        }, slots.default !== void 0 ? slots.default() : [ h('div', normalized.value) ])\n      )\n\n      return h('div', {\n        class: `q-circular-progress q-circular-progress--${ props.indeterminate === true ? 'in' : '' }determinate`,\n        style: sizeStyle.value,\n        role: 'progressbar',\n        'aria-valuemin': props.min,\n        'aria-valuemax': props.max,\n        'aria-valuenow': props.indeterminate === true ? void 0 : normalized.value\n      }, hMergeSlotSafely(slots.internal, child)) // \"internal\" is used by QKnob\n    }\n  }\n})\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}